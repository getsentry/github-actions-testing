name: foo
on:
  push:
    branches:
      - master
  pull_request:

jobs:
  one:
    runs-on: ubuntu-20.04
    name: Github context
    steps:
      - name: Github context debugging
        run: |
          jq . <<EOF
            ${{ toJSON(github) }}
          EOF

  two:
    runs-on: ubuntu-20.04
    steps:
      - run: "exit 0"

  three:
    if: github.head_repository.full_name == 'getsentry/github-actions-testing'
    runs-on: ubuntu-20.04
    steps:
      - run: "exit 0"

  four:
    runs-on: ubuntu-20.04
    steps:
      - run: "exit 1"

  approach-a-success:
    # We should never skip this job
    needs: [one, two]
    # The name has to match the name from the next job
    name: Approach A - all passing
    runs-on: ubuntu-20.04
    # This is necessary since a failed/skipped job would cause this job to be skipped
    if: always()
    steps:
      - name: Check for any failures
        # This sadly requires duplication of the list declated in needs
        if: needs.one.result == 'failure' || needs.two.result == 'failure'
        run: "exit 2"

  # This one includes a job that is skipped
  approach-a-skip:
    # We should never skip this job
    needs: [one, two, three]
    # The name has to match the name from the next job
    name: Approach A - one skipped
    runs-on: ubuntu-20.04
    # This is necessary since a failed/skipped job would cause this job to be skipped
    if: always()
    steps:
      - name: Check for any failures
        # This sadly requires duplication of the list declated in needs
        if: needs.one.result == 'failure' || needs.two.result == 'failure' || needs.three.result == 'failure'
        run: "exit 2"

  # This one includes a job that is skipped
  approach-a-failure:
    # We should never skip this job
    needs: [one, two, three, four]
    # The name has to match the name from the next job
    name: Approach A - one failing
    runs-on: ubuntu-20.04
    # This is necessary since a failed/skipped job would cause this job to be skipped
    if: always()
    steps:
      - name: Check for any failures
        # This sadly requires duplication of the list declated in needs
        if: needs.one.result == 'failure' || needs.two.result == 'failure' || needs.three.result == 'failure' || needs.four.result == 'failure'
        run: "exit 2"
